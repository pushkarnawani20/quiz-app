{"version":3,"sources":["components/QuestionTitle.js","components/Options.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["QuestionTitle","props","react_default","a","createElement","className","current_question","Options","_this","this","Fragment","answers","map","answer","i","key","href","onClick","handleSelect","selectedAnswer","handleSubmit","Component","Results","end_message","score","retry","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","start","selected","questions","quizData","bind","assertThisInitialized","retryQuiz","_this$state","correctIndex","correct","setState","console","log","_this$state2","length","components_QuestionTitle","question","components_Options","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b50779e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst QuestionTitle = (props) =>{\r\n  return (\r\n    <div className=\"questionTitle\">\r\n      <p>{props.current_question}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionTitle;\r\n","import React, { Component } from 'react';\r\n\r\nclass Options extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul className=\"questionOptions\">\r\n          {this.props.answers.map((answer, i) =>\r\n            <li key={i}>\r\n              <a href='#' onClick={() => this.props.handleSelect(answer)}>{answer}</a>\r\n            </li>\r\n          )}\r\n        </ul>\r\n        <div className=\"submitionSection\">\r\n          <p>You have selected: {this.props.selectedAnswer}</p>\r\n          <button className=\"btn\" onClick={this.props.handleSubmit}>Submit</button>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Options;\r\n","import React, { Component } from 'react';\r\n\r\nconst Results = (props) => {\r\n    return  (\r\n      <div>\r\n        <p>{props.end_message}</p>\r\n        <p>Your score was: {props.score}</p>\r\n        <button className=\"btn\" onClick={props.retry}>Retry</button>\r\n      </div>\r\n    )\r\n}\r\nexport default Results;\r\n","import React, { Component } from 'react';\nimport quizData from './quiz.json';\nimport QuestionTitle from './components/QuestionTitle';\nimport Options from './components/Options';\nimport Results from './components/Results';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n       start: 0,\n       selected: 'None yet!',\n       questions:quizData,\n       score: 0\n     }\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.retryQuiz = this.retryQuiz.bind(this);\n  }\n\n  handleSubmit() {\n    let {questions,selected,start,score} = this.state;\n    if (selected !== 'None yet!') {\n      let correctIndex = questions[start].correct;\n      if (selected === questions[start].answers[correctIndex]) {\n        this.setState({\n          score: score + 1,\n          start: start + 1,\n          selected: 'None yet!'\n        })\n      } else {\n        this.setState({\n          start: start + 1,\n          selected: 'None yet!'\n        })\n      }\n    }\n  }\n\n  handleSelect(answer) {\n    this.setState({\n      selected: answer\n    })\n  }\n\n  retryQuiz() {\n    this.setState({\n      start: 0,\n      selected: 'None yet!',\n      score: 0\n    })\n  }\n  render() {\n    console.log(this.state);\n    let {questions, start } = this.state;\n    return (\n      <div className=\"app\">\n          <header className=\"header\">\n              <h1 >React Quiz</h1>\n          </header>\n          {start < questions.length  ? (\n            <>\n                <div className=\"quizStatus\">\n                  <p>Progress: {start}/{questions.length}</p>\n                </div>\n                <QuestionTitle current_question={questions[start].question} />\n                <Options\n                  answers={questions[start].answers}\n                  handleSelect={this.handleSelect}\n                  handleSubmit={this.handleSubmit}\n                  selectedAnswer={this.state.selected} />\n            </>\n          )\n          :(\n            <Results score={this.state.score} end_message=\"Congratulations, you have finished!\" retry={this.retryQuiz} />\n\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}